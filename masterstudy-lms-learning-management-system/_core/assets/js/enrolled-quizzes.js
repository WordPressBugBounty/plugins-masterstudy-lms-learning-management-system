(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _tabsToggle = require("./modules/tabs-toggle.js");
var _quizAttempts = require("./modules/quiz-attempts.js");
var _enrolledQuizzes = require("./modules/enrolled-quizzes.js");
var _config = require("./modules/config.js");
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
window.$ = jQuery;
$(document).ready(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
  return _regeneratorRuntime().wrap(function _callee$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        (0, _tabsToggle.initTabsToggle)();
        if (typeof masterstudy_quiz_attempts !== "undefined" && $(_config.CONFIG.selectors.quizStandalone.container).length) {
          _quizAttempts.QuizAttemptsModule.init('standalone');
        }
        if ($('.masterstudy-enrolled-quizzes-container').length) {
          _enrolledQuizzes.EnrolledQuizzesModule.init();
        }
      case 3:
      case "end":
        return _context.stop();
    }
  }, _callee);
})));

},{"./modules/config.js":2,"./modules/enrolled-quizzes.js":3,"./modules/quiz-attempts.js":4,"./modules/tabs-toggle.js":5}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CONFIG = void 0;
var CONFIG = {
  apiBase: ms_lms_resturl,
  nonce: ms_lms_nonce,
  endpoints: {
    quizAttempts: "/quiz/attempts",
    enrolledQuizzes: "/enrolled-quizzes"
  },
  selectors: {
    quizHistory: {
      navigation: ".masterstudy-course-player-quiz-attempts-navigation",
      perPage: ".masterstudy-course-player-quiz-attempts-navigation__per-page",
      container: ".masterstudy-course-player-quiz-attempts",
      templateId: "masterstudy-course-player-quiz-attempts-template",
      pagination: ".masterstudy-course-player-quiz-attempts-navigation__pagination",
      prefix: ".masterstudy-course-player-quiz-attempt"
    },
    quizStandalone: {
      navigation: ".masterstudy-quiz-attempts-navigation",
      perPage: ".masterstudy-quiz-attempts-navigation__per-page",
      container: ".masterstudy-quiz-attempts",
      templateId: "masterstudy-quiz-attempts-template",
      pagination: ".masterstudy-quiz-attempts-navigation__pagination",
      prefix: ".masterstudy-quiz-attempt"
    },
    enrolledQuizzes: {
      navigation: ".masterstudy-enrolled-quizzes-navigation",
      perPage: ".masterstudy-enrolled-quizzes-navigation__per-page",
      container: ".masterstudy-enrolled-quizzes-container",
      templateId: "masterstudy-enrolled-quizzes-template",
      pagination: ".masterstudy-enrolled-quizzes-navigation__pagination",
      prefix: ".masterstudy-enrolled-quizzes-item"
    }
  }
};
exports.CONFIG = CONFIG;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EnrolledQuizzesModule = void 0;
var _config = require("./config.js");
var _utils = require("./utils.js");
window.$ = jQuery;
var EnrolledQuizzesModule = function () {
  var config = {
    selectors: _config.CONFIG.selectors.enrolledQuizzes,
    endpoint: _config.CONFIG.endpoints.enrolledQuizzes
  };
  var totalPages = 1;
  function fetchQuizzes() {
    var perPage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
    var currentPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var url = _config.CONFIG.apiBase + config.endpoint;
    var query = [];
    var $input = $('.masterstudy-enrolled-quizzes-search__input');
    var searchQuery = $input.length ? $input.val().trim() : '';
    if (searchQuery) query.push("s=".concat(encodeURIComponent(searchQuery)));
    if (perPage) query.push("per_page=".concat(perPage));
    if (currentPage) query.push("current_page=".concat(currentPage));
    if (query.length) url += "?".concat(query.join("&"));
    (0, _utils.updatePaginationView)(totalPages, currentPage);
    var $container = $(config.selectors.container);
    $('.masterstudy-enrolled-quizzes__course, .masterstudy-enrolled-quizzes-no-found__info', config.selectors.container).remove();
    $container.addClass("quizzes-loading");
    fetch(url, {
      headers: {
        "X-WP-Nonce": _config.CONFIG.nonce,
        "Content-Type": "application/json"
      }
    }).then(function (res) {
      return res.json();
    }).then(function (data) {
      $container.css("height", "auto").removeClass("quizzes-loading");
      $(".masterstudy-enrolled-quizzes .stm_lms_user_info_top h3").html(function (_, html) {
        return html.replace(/<span>.*<\/span>/, "") + " <span>".concat(data.total_quizzes, "</span>");
      });
      $('.masterstudy-enrolled-quizzes__course, .masterstudy-enrolled-quizzes-no-found__info', config.selectors.container).remove();
      updatePagination(data.pages, currentPage);
      if (!data.courses || data.courses.length === 0) {
        var template = document.getElementById('masterstudy-enrolled-quizzes-no-found-template');
        if (template) {
          var clone = template.content.cloneNode(true);
          $(config.selectors.navigation).hide();
          $(searchQuery ? '.masterstudy-enrolled-quizzes-no-found__items' : '.masterstudy-enrolled-quizzes-no-found__search', clone).remove();
          $container.append(clone);
        }
        return;
      }
      $(config.selectors.navigation).show();
      totalPages = data.pages;
      (data.courses || []).forEach(function (course) {
        var html = renderCourseTemplate(course);
        $container.append(html);
      });
    })["catch"](function (err) {
      console.error("Error fetching enrolled quizzes:", err);
      $container.css("height", "auto").removeClass("quizzes-loading");
    });
  }
  function renderCourseTemplate(course) {
    var template = document.getElementById(config.selectors.templateId);
    if (!template) return '';
    var clone = template.content.cloneNode(true);
    var courseLink = clone.querySelector('.masterstudy-enrolled-quizzes-course__link');
    courseLink.textContent = course.title;
    courseLink.href = course.url;
    var itemsContainer = clone.querySelector('.masterstudy-enrolled-quizzes-items');
    var itemTemplate = clone.querySelector('.masterstudy-enrolled-quizzes-item');
    itemsContainer.innerHTML = '';
    Object.values(course.quizzes || {}).forEach(function (quiz) {
      var item = itemTemplate.cloneNode(true);
      item.querySelector('.masterstudy-enrolled-quizzes-item__name--link').textContent = quiz.title;
      item.querySelector('.masterstudy-enrolled-quizzes-item__name--link').href = quiz.url;
      item.querySelector('.masterstudy-enrolled-quizzes-item__attempts').textContent = quiz.attempts.count;
      item.querySelector('.masterstudy-enrolled-quizzes-item__questions').textContent = quiz.questions;
      item.querySelector('.masterstudy-enrolled-quizzes-item__progress').dataset.quizProgress = quiz.progress;
      item.querySelector('.masterstudy-enrolled-quizzes-item__progress--filled').style.width = "".concat(quiz.progress, "%");
      item.querySelector('.masterstudy-enrolled-quizzes-item__progress--status').textContent = "".concat(quiz.grade);
      var statusEl = item.querySelector('.masterstudy-enrolled-quizzes-item__status');
      statusEl.textContent = quiz.status.label;
      statusEl.dataset.quizStatus = quiz.status.value;
      statusEl.classList.add(quiz.status.value);
      item.querySelector('.masterstudy-enrolled-quizzes-item__details').href = quiz.attempts.url;
      itemsContainer.appendChild(item);
    });
    return clone;
  }
  function updatePagination(totalPages, currentPage) {
    (0, _utils.renderPagination)({
      ajaxurl: stm_lms_ajaxurl,
      nonce: stm_lms_nonces.stm_lms_enrolled_quizzes,
      totalPages: totalPages,
      currentPage: currentPage,
      paginationContainer: config.selectors.pagination,
      onPageChange: fetchQuizzes,
      getPerPageSelector: function getPerPageSelector() {
        return '#enrolled-quizzes-per-page';
      }
    });
  }
  return {
    init: function init() {
      (0, _utils.bindPerPageHandler)($(config.selectors.prefix, config.selectors.container), config.selectors.perPage, fetchQuizzes);
      fetchQuizzes();
      initSearch();
    }
  };
  function initSearch() {
    var $input = $('.masterstudy-enrolled-quizzes-search__input');
    if (!$input.length) return;
    var timer;
    var lastQuery = '';
    $input.off("input").on("input", function () {
      clearTimeout(timer);
      timer = setTimeout(function () {
        var query = $input.val().trim();
        if (query !== lastQuery) {
          lastQuery = query;
          fetchQuizzes($("#enrolled-quizzes-per-page").val(), 1);
        }
      }, 300);
    });
  }
}();
exports.EnrolledQuizzesModule = EnrolledQuizzesModule;

},{"./config.js":2,"./utils.js":6}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QuizAttemptsModule = void 0;
var _config = require("./config.js");
var _utils = require("./utils.js");
window.$ = jQuery;
var QuizAttemptsModule = function () {
  var config = {
    mode: 'standalone',
    selectors: _config.CONFIG.selectors.quizStandalone,
    endpoint: _config.CONFIG.endpoints.quizAttempts
  };
  var totalPages = 1;
  function setMode(mode) {
    config.mode = mode;
    config.selectors = mode === 'history' ? _config.CONFIG.selectors.quizHistory : _config.CONFIG.selectors.quizStandalone;
  }
  function fetchAttempts() {
    var perPage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
    var currentPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var url = _config.CONFIG.apiBase + config.endpoint;
    var query = [];
    if (perPage) query.push("per_page=".concat(perPage));
    if (currentPage) query.push("current_page=".concat(currentPage));
    if (masterstudy_quiz_attempts.course_id) query.push("course_id=".concat(masterstudy_quiz_attempts.course_id));
    if (masterstudy_quiz_attempts.quiz_id) query.push("quiz_id=".concat(masterstudy_quiz_attempts.quiz_id));
    if (query.length) url += "?".concat(query.join("&"));
    (0, _utils.updatePaginationView)(totalPages, currentPage);
    var $container = $(config.selectors.container);
    $(config.selectors.prefix, $container).remove();
    $container.addClass("quiz-attempts-loading");
    fetch(url, {
      method: "GET",
      headers: {
        "X-WP-Nonce": _config.CONFIG.nonce,
        "Content-Type": "application/json"
      }
    }).then(function (res) {
      return res.json();
    }).then(function (data) {
      $container.css("height", "auto").removeClass("quiz-attempts-loading");
      $(config.selectors.prefix, $container).remove();
      totalPages = data.pages;
      updatePagination(data.pages, currentPage);
      (data.attempts || []).forEach(function (attempt) {
        var html = renderAttemptTemplate(attempt);
        $container.append(html);
      });
    })["catch"](function (err) {
      console.error("Error fetching quiz attempts:", err);
      $container.css("height", "auto").removeClass("quiz-attempts-loading");
    });
  }
  function renderAttemptTemplate(attempt) {
    var template = document.getElementById(config.selectors.templateId);
    if (!template) return '';
    var clone = template.content.cloneNode(true);
    var $ = function $(selector) {
      return clone.querySelector(selector);
    };
    var prefix = config.selectors.prefix;
    var date = $("".concat(prefix, "__date"));
    var selectorDate = date.getAttribute('data-header').replace('%s', attempt.number);
    $("".concat(prefix, "__number")).textContent = attempt.number;
    date.setAttribute('data-header', selectorDate);
    $("".concat(prefix, "__date--value")).textContent = attempt.created_at.date;
    $("".concat(prefix, "__date--time")).textContent = attempt.created_at.time;
    $("".concat(prefix, "__questions")).textContent = attempt.questions;
    $("".concat(prefix, "__correct")).textContent = attempt.attempts.correct;
    $("".concat(prefix, "__incorrect")).textContent = attempt.attempts.incorrect;
    $("".concat(prefix, "__progress")).setAttribute("data-quiz-progress", attempt.progress);
    $("".concat(prefix, "__progress--filled")).style.width = "".concat(attempt.progress, "%");
    $("".concat(prefix, "__grade")).textContent = "".concat(attempt.grade);
    $("".concat(prefix, "__status")).setAttribute("data-quiz-status", attempt.status.value);
    $("".concat(prefix, "__status")).textContent = attempt.status.label;
    $("".concat(prefix, "__status")).classList.add(attempt.status.value);
    $("".concat(prefix, "__details")).setAttribute("href", attempt.url);
    return clone;
  }
  function updatePagination(totalPages, currentPage) {
    (0, _utils.renderPagination)({
      ajaxurl: stm_lms_ajaxurl,
      nonce: stm_lms_nonces.stm_lms_enrolled_quizzes,
      totalPages: totalPages,
      currentPage: currentPage,
      paginationContainer: config.selectors.pagination,
      onPageChange: fetchAttempts,
      getPerPageSelector: function getPerPageSelector() {
        return '#quiz-attempts-per-page';
      }
    });
  }
  return {
    init: function init() {
      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'standalone';
      setMode(mode);
      (0, _utils.bindPerPageHandler)($(config.selectors.prefix, config.selectors.container), config.selectors.perPage, fetchAttempts);
      fetchAttempts();
    }
  };
}();
exports.QuizAttemptsModule = QuizAttemptsModule;

},{"./config.js":2,"./utils.js":6}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initTabsToggle = initTabsToggle;
var _quizAttempts = require("./quiz-attempts.js");
window.$ = jQuery;
function initTabsToggle() {
  var tabClass = "masterstudy-tabs__item";
  var activeClass = "masterstudy-tabs__item_active";
  var quizContent = ".masterstudy-course-player-content__header_quiz, .masterstudy-course-player-quiz, [data-id='quiz_alert']";
  var attemptsContent = ".masterstudy-course-player-quiz-attempts-wrapper";
  var beforeRequest = false;
  $(".".concat(tabClass, "[data-id]")).on("click", function () {
    var $this = $(this);
    var currentId = $this.data("id");
    var prevId = currentId === "quiz" ? "history" : "quiz";
    var toShow = currentId === "quiz" ? quizContent : attemptsContent;
    var toHide = currentId === "quiz" ? attemptsContent : quizContent;
    $("[data-id='".concat(prevId, "']")).removeClass(activeClass);
    $this.addClass(activeClass);
    $(toShow).removeClass("masterstudy-course-player-quiz__hide").show();
    $(toHide).addClass("masterstudy-course-player-quiz__hide");
    if (currentId === "history" && !beforeRequest) {
      beforeRequest = true;
      _quizAttempts.QuizAttemptsModule.init("history");
    }
  });
}

},{"./quiz-attempts.js":4}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.attachPaginationClickHandlers = attachPaginationClickHandlers;
exports.bindPerPageHandler = bindPerPageHandler;
exports.renderPagination = renderPagination;
exports.updatePaginationView = updatePaginationView;
window.$ = jQuery;
function updatePaginationView(totalPages, currentPage) {
  $(".masterstudy-pagination__item").removeClass('masterstudy-pagination__item_current').hide();
  var start = Math.max(1, currentPage - 1);
  var end = Math.min(totalPages, currentPage + 1);
  if (currentPage === 1 || start === 1) end = Math.min(totalPages, start + 2);
  if (currentPage === totalPages || end === totalPages) start = Math.max(1, end - 2);
  for (var i = start; i <= end; i++) {
    $(".masterstudy-pagination__item:has([data-id=\"".concat(i, "\"])")).show();
  }
  $(".masterstudy-pagination__item-block[data-id=\"".concat(currentPage, "\"]")).parent().addClass('masterstudy-pagination__item_current');
  $(".masterstudy-pagination__button-next").toggle(currentPage < totalPages);
  $(".masterstudy-pagination__button-prev").toggle(currentPage > 1);
}
function attachPaginationClickHandlers(totalPages, onPageChange, getPerPageSelector) {
  $(".masterstudy-pagination__item-block").off("click").on("click", function () {
    if ($(this).parent().hasClass('masterstudy-pagination__item_current')) {
      return;
    }
    var page = $(this).data("id");
    onPageChange($(getPerPageSelector()).val(), page);
  });
  $(".masterstudy-pagination__button-prev").off("click").on("click", function () {
    var current = $(".masterstudy-pagination__item_current .masterstudy-pagination__item-block").data("id");
    if (current > 1) onPageChange($(getPerPageSelector()).val(), current - 1);
  });
  $(".masterstudy-pagination__button-next").off("click").on("click", function () {
    var current = $(".masterstudy-pagination__item_current .masterstudy-pagination__item-block").data("id");
    var total = $(".masterstudy-pagination__item-block").length;
    if (current < total) onPageChange($(getPerPageSelector()).val(), current + 1);
  });
}
function bindPerPageHandler(containerSelector, perPage, fetchFn) {
  $(".masterstudy-select__option, .masterstudy-select__clear", perPage).off("click").on("click", function () {
    $(containerSelector).remove();
    fetchFn($(this).data("value"));
  });
}
function renderPagination(_ref) {
  var ajaxurl = _ref.ajaxurl,
    nonce = _ref.nonce,
    totalPages = _ref.totalPages,
    currentPage = _ref.currentPage,
    paginationContainer = _ref.paginationContainer,
    onPageChange = _ref.onPageChange,
    getPerPageSelector = _ref.getPerPageSelector;
  $.post(ajaxurl, {
    action: "get_pagination",
    total_pages: totalPages,
    current_page: currentPage,
    _ajax_nonce: nonce
  }, function (response) {
    if (response.success) {
      var $nav = $(paginationContainer);
      $nav.toggle(totalPages > 1).html(response.data.pagination);
      attachPaginationClickHandlers(totalPages, onPageChange, getPerPageSelector);
      updatePaginationView(totalPages, currentPage);
    }
  });
}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
